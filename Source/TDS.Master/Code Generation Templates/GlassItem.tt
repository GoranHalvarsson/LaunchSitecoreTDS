<#@ template language="C#" #>
<#@ output encoding="utf-8"#>

<#@ include file="Helpers.tt" #>

<#@ assembly name="System.Core.dll" #>

<#@ import namespace="HedgehogDevelopment.CodeGeneration.Extensions" #>
<#@ assembly name="HedgehogDevelopment.CodeGeneration.Extensions.dll" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models" #>

<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.SitecoreItem" #>
<#@ parameter name="DefaultNamespace" type="System.String" #>

<#
/*
This TDS Code Generation template is used to generate objects that are compatible with the
Glass Sitecore Mapper that is available @ http://www.glass.lu/

There are a few things you can put in the 'Custom Data' property of a field in TDS. 
To use multiple settings put them in as a querystring (key1=value&key2=value)

ignore=true
	Sets a field to be skipped over for code gen
name=[name]
	Forces the name of the generated property. 
	If not specified, then the generated property is the name of the Sitecore field. 
	If the field stores multiple values, the property name is pluralized.
type=[type]
	Sets the return type of the generated property
generic=[type]
	In the event the type (either specificed or auto mapped) is a generic it will use this generic type. i.e. List<generic>
		
*/
#>

<#
// we only act on Templates
SitecoreTemplate template = Model as SitecoreTemplate;
if (template == null)
{
	return "";
}

string Tool = "Team Development for Sitecore - GlassItem.tt";
string ToolVersion = "1.0";
#>

namespace <#= GetNamespace(DefaultNamespace, template)#>
{
 	/// <summary>
	/// <#= template.Name.AsInterfaceName() #> Interface
<# string templateShortDescription = GetDescriptionAsComment(template.SitecoreFields.GetValue("__Short description"), false);
if (!string.IsNullOrEmpty(templateShortDescription))
{ #><#= templateShortDescription #><# } #>
<# string templateLongDescription = GetDescriptionAsComment(template.SitecoreFields.GetValue("__Long description"), false);
if (!string.IsNullOrEmpty(templateLongDescription))
{ #><#= templateLongDescription #><# } #>
    /// <para>Path: <#= template.Path #></para>	
    /// <para>ID: <#= template.ID.ToString().ToUpper() #></para>	
    /// </summary>
    public interface <#= template.Name.AsInterfaceName() #> : IGlassBase <#=GetObjectInheritanceDefinition(DefaultNamespace, template, true, (string s) => s.AsInterfaceName())#>
    {
<#foreach(SitecoreField field in GetFieldsForTemplate(template, false)){#>
<# if (IsCodeGenSupportedField(field)) { #>
        /// <summary>
<# string fieldShortDescription = GetDescriptionAsComment(field.SitecoreFields.GetValue("__Short description"), true);
if (!string.IsNullOrEmpty(fieldShortDescription))
{ #><#= fieldShortDescription #><# } #>
<# string fieldLongDescription = GetDescriptionAsComment(field.SitecoreFields.GetValue("__Long description"), true);
if (!string.IsNullOrEmpty(fieldLongDescription))
{ #><#= fieldLongDescription #><# } #>
        /// <para>Field Type: <#=field.Type#></para>		
        /// </summary>
        <#=GetGlassFieldType(field)#> <#= GetPropertyName(field) #>  {get; set;}

<#}#>
<#}#>
	}

<#
// If the name of the template looks like an Interface, then don't generate a class definition
if (!template.Name.IsInterfaceWord()){ #>	
	/// <summary>
	/// <#= template.Name.AsClassName() #>
<# if (!string.IsNullOrEmpty(templateShortDescription))
{ #><#= templateShortDescription #> <# } #>
<# if (!string.IsNullOrEmpty(templateLongDescription))
{ #><#= templateLongDescription #> <# } #>
	/// <para>Path: <#= template.Path #></para>	
	/// <para>ID: <#= template.ID.ToString().ToUpper() #></para>	
	/// </summary>
	[SitecoreType(TemplateId="<#=template.ID#>")]
	public partial class <#= template.Name.AsClassName() #>  : GlassBase, <#=template.Name.AsInterfaceName()#> 
	{
<#foreach(SitecoreField field in GetFieldsForTemplate(template, true)){#>
<# if (IsCodeGenSupportedField(field)) { #>
        /// <summary>
<# string fieldShortDescription = GetDescriptionAsComment(field.SitecoreFields.GetValue("__Short description"), true);
if (!string.IsNullOrEmpty(fieldShortDescription))
{ #><#= fieldShortDescription #><# } #>
<# string fieldLongDescription = GetDescriptionAsComment(field.SitecoreFields.GetValue("__Long description"), true);
if (!string.IsNullOrEmpty(fieldLongDescription))
{ #><#= fieldLongDescription #><# } #>
        /// <para>Field Type: <#=field.Type#></para>		
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#=Tool#>", "<#=ToolVersion#>")]
<# string glassFieldName = GetPropertyName(field);
if (String.Compare(glassFieldName, field.Name) == 0)
{ #>        [SitecoreField] 
<# }
else
{ #>        [SitecoreField("<#=field.Name#>")] 
<# } #>
        public virtual <#=GetGlassFieldType(field)#> <#= GetPropertyName(field) #>  {get; set;}
<#}#>			
<#}#>	
	}
<#}#>
}

<#+
/// <summary>
/// Gets the inheritance string for the generated template
/// </summary>
/// <param name="defaultNamespace">The default namespace.</param>
/// <param name="template">The template to get the bases for.</param>
/// <param name="nameFunc">The function to run the base templates names through.</param>
/// <returns></returns>
public static string GetObjectInheritanceDefinition(string defaultNamespace, SitecoreTemplate item, bool includeLeadingComma, Func<string, string> nameFunc)
{
	if (item.BaseTemplates.Count > 0)
	{
		return string.Concat(includeLeadingComma ? ", " : "",
								item.BaseTemplates
								.Select( bt => GetFullyQualifiedName(defaultNamespace, bt, nameFunc)) // select the name of the template with an 'I' prefix
								.Aggregate( (total,next) => total + ", " + next) // basically a string.join(string[], '')
							);
	}
	return "";
}

/// <summary>
/// Determines whether or not we can generated code for this field.
/// </summary>
/// <param name="field">The field being checked.</param>
/// <returns></returns>
public static bool IsCodeGenSupportedField(SitecoreField field)
{
	if (field != null && field.Type != null)
    {
		switch(field.Type.ToLower())
		{
			case "tristate":
			case "checkbox":
			case "date":
			case "datetime":
			case "number":
			case "integer":
			case "treelist":
			case "treelistex":
			case "treelist descriptive":
			case "checklist":
			case "multilist":
			case "grouped droplink":
			case "droplink":
			case "lookup":
			case "droptree":
			case "reference":
			case "tree":
			case "file":
			case "image":
			case "rich text":
			case "html":
			case "general link":
			case "internal link":
			case "single-line text":
			case "multi-line text":
			case "frame":
			case "text":
			case "memo":
			case "droplist":
			case "grouped droplist":
			case "valuelookup":
				return true;
			// custom fields
			case "relativepathtreelist":
			case "video link":
				return true;
			default:
				return false;
		}
	}

	return false;
}

public static string GetGlassFieldType(SitecoreField field)
{
	if (field != null && field.Type != null)
    {
		// Pull out any 'type' param from the custom data field on the field in TDS
		string customType = GetCustomProperty(field.Data, "type");
		string generic = GetCustomProperty(field.Data, "generic");
		
		if (customType != "")
		{
			if (generic != "")
			{
				return string.Format("{0}<{1}>", customType, generic);
			}
			else
			{
				return customType;
			}
		}

		switch(field.Type.ToLower())
		{
			case "tristate":
				return "TriState";
			case "checkbox":
				return "bool";

			case "date":
			case "datetime":
				return "DateTime";

			case "number":
				return "float";

			case "integer":
				return "int";

			case "treelist":
			case "treelistex":
			case "relativepathtreelist":
			case "treelist descriptive":
			case "checklist":
			case "multilist":
	            return string.Format("IEnumerable<{0}>", string.IsNullOrEmpty(generic) ? "Guid" : generic);

			case "grouped droplink":
			case "droplink":
			case "lookup":
			case "droptree":
			case "reference":
			case "tree":
				return "Guid";

			case "file":
				return "File";

			case "image":
				return "Image";

			case "rich text":
			case "html":
				return "string";

			case "general link":
			case "internal link":
			case "video link":
				return "Link";

			case "single-line text":
			case "multi-line text":
			case "frame":
			case "text":
			case "memo":
			case "droplist":
			case "grouped droplist":
			case "valuelookup":
				return "string";	                                                                                                                            
			default:
				return "object /* UNKNOWN */";
		}
	}
	else 
	{
	   throw new Exception("There is no 'Type' field on the " + field.Name + " field.");
	}
}
#>