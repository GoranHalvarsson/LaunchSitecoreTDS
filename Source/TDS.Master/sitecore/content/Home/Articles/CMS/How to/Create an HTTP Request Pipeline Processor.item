----item----
version: 1
id: {C034AE92-C473-4E21-91DA-21C1EC643548}
database: master
path: /sitecore/content/Home/Articles/CMS/How to/Create an HTTP Request Pipeline Processor
parent: {44EEE557-704F-4F3D-87B4-187D128C2BAE}
name: Create an HTTP Request Pipeline Processor
master: {00000000-0000-0000-0000-000000000000}
template: {D9019E30-F954-46CC-AA70-3E928C40B5D0}
templatekey: Article

----field----
field: {B0A67B2A-8B07-4E0B-8809-69F751709806}
name: __Tracking
key: __tracking
content-length: 385

<tracking>
  <profile id="{62A90F30-9BAB-425B-8A6D-4AE5A28371D6}" name="Job Function" presets="devon the developer|100||">
    <key name="Analytics" value="1" />
    <key name="Copywriting" value="1" />
    <key name="Personalization and Testing" value="2" />
    <key name="Technology" value="5" />
    <key name="Workflow and Publishing" value="3" />
  </profile>
</tracking>
----field----
field: {A4F985D9-98B3-4B52-AAAF-4344F6E747C6}
name: __Workflow
key: __workflow
content-length: 38

{E3FBD307-EC4A-4377-BFEB-F732CD5CAF5A}
----version----
language: en
version: 1
revision: bb34d8bd-5d4a-4b9c-aac2-e4893fc675ca

----field----
field: {234542DC-C610-4CA8-BAA6-2592A8BCB1D7}
name: Title
key: title
content-length: 41

Create an HTTP Request Pipeline Processor
----field----
field: {00E1D306-96BD-4B32-85B4-CD63C53CC6C1}
name: Abstract
key: abstract
content-length: 334

When you want to add custom logic to Sitecore there are many ways to add it. These include custom workflows, validation rules, and pipelines. Pipelines are sequences of steps that Sitecore runs for a given event. This means to add logic or processing for an event, you simply need to write a processor and register it in the pipeline.
----field----
field: {5A5684BB-8B54-44F6-ABCC-2BADA05ADA5D}
name: Body
key: body
content-length: 5657

<p>So far most of the articles and examples have used Sitecore right out of the box. There are times though where you want to customize how something happens. This is where pipelines come in to allow us to customize the software without impacting future product updates. It is probably not immediately clear when you might want to do this, so I will offer a few example use cases before we show how to implement a processor.</p>
<p>Often clients that integrate Sitecore with a PIM will have each product modeled in Sitecore for their website so it doesn't directly have to query the PIM throughout the day. Since the content is being sourced from a third party system we need to provide a way to update Sitecore. One of the ways to accomplish this is through a pipeline processor. We could add a processor to the publishing pipeline to update product information during publish. </p>
<p>Another example could have to do with providing content to a third party system. If we wanted to provide XML files to another system, we could also add a step to the publish pipeline to create these files.</p>
<p>The example we will look at in more detail is available as a Shared Source Module. It is the 301 Redirect Module, and it adds a step to the httpRequestBegin pipeline. This is the pipeline that is run whenever Sitecore responds to a request. The ItemResolver step is part of the default pipeline and is responsible for determining the Sitecore item that was requested. We are adding a new step right after the ItemResolver. Below is the code from the configuration file that adds the pipeline processor. </p>
<div class="code">
<div style="background: #ddd; overflow: auto;">
<ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px;">
 <li><span style="color: #0000ff;">&lt;</span><span style="color: #a31515;">pipelines</span><span style="color: #0000ff;">&gt;</span></li>
 <li style="background: #f3f3f3;">  <span style="color: #0000ff;">&lt;</span><span style="color: #a31515;">httpRequestBegin</span><span style="color: #0000ff;">&gt;  </span></li>
 <li>  <span style="color: #0000ff;">&lt;</span><span style="color: #a31515;">processor</span><span style="color: #0000ff;"> </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">SharedSource.RedirectModule.Redirects,SharedSource.RedirectModule</span>"<span style="color: #0000ff;"> </span><span style="color: #ff0000;">patch:after</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">processor[@type='Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel']</span>"<span style="color: #0000ff;">/&gt;</span></li>
 <li style="background: #f3f3f3;">  <span style="color: #0000ff;">&lt;/</span><span style="color: #a31515;">httpRequestBegin</span><span style="color: #0000ff;">&gt; </span></li>
 <li> <span style="color: #0000ff;">&lt;/</span><span style="color: #a31515;">pipelines</span><span style="color: #0000ff;">&gt;</span></li>
</ol>
</div>
</div>
<p>Now that we see how to register the processor it is time to discuss how it will work. Our new step will do some processing in the event that Sitecore was not able to resolve the request to an item. Without this step, the site would have returned a 404. We simply are adding the ability to check for a stored redirect.</p>
<div class="code">
<div style="background: #ddd; overflow: auto;">
<ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px;">
 <li><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> <span style="color: #2b91af;">Redirects</span> : <span style="color: #2b91af;">HttpRequestProcessor</span></li>
 <li style="background: #f3f3f3;">{</li>
 <li>  <span style="color: #808080;">///</span><span style="color: #008000;"> </span><span style="color: #808080;">&lt;summary&gt;</span></li>
 <li style="background: #f3f3f3;">  <span style="color: #808080;">///</span><span style="color: #008000;"> The main method for the processer. It simply overrides the Process method.</span></li>
 <li>  <span style="color: #808080;">///</span><span style="color: #008000;"> </span><span style="color: #808080;">&lt;/summary&gt;</span></li>
 <li style="background: #f3f3f3;">  <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> Process(<span style="color: #2b91af;">HttpRequestArgs</span> args)</li>
 <li>  {</li>
 <li style="background: #f3f3f3;">   <span style="color: #008000;">// This processer is added to the pipeline after the Sitecore Item Resolver. We want to skip everything if the item resolved successfully.</span></li>
 <li>   <span style="color: #2b91af;">Assert</span>.ArgumentNotNull(args, <span style="color: #a31515;">"args"</span>);</li>
 <li style="background: #f3f3f3;">   <span style="color: #0000ff;">if</span> (Sitecore.<span style="color: #2b91af;">Context</span>.Item == <span style="color: #0000ff;">null</span>)</li>
 <li>   {</li>
 <li style="background: #f3f3f3;">     <span style="color: #008000;">// Check for 301 Redirect Item...      </span></li>
 <li>   }</li>
 <li style="background: #f3f3f3;">  }</li>
</ol>
</div>
</div>
<p>The code above is the processor. It inherits HttpRequestProcessor and overrides the Process method. On line 10, you can see the check to see if Sitecore resolved the item. If not, we will do our custom 301 check. You can see the full code example on SDN in the Shared Source Library.</p>
----field----
field: {24DDFF9E-D4D8-46C8-99A6-6B01F5251B8F}
name: Use case solution statement
key: use case solution statement
content-length: 54

"I want to change the way Sitecore handles a process."
----field----
field: {EFC4A071-5574-404A-8206-FB502FCA909B}
name: Prerequisite Articles
key: prerequisite articles
content-length: 38

{214F6F87-593C-45F3-8DA0-F731145239B1}
----field----
field: {82D725ED-6707-4532-86A6-5444E34332FD}
name: Contributors
key: contributors
content-length: 38

{EF5350C8-21BF-43A3-BCEF-71F29D91AEF0}
----field----
field: {D7229DBA-B952-4D82-A5A0-459C69618D45}
name: Menu Title
key: menu title
content-length: 27

Create a Pipeline Processor
----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20111027T105000
----field----
field: {5DD74568-4D4B-44C1-B513-0AF5F4CDA34F}
name: __Created by
key: __created by
content-length: 12

sitecore\mic
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

bb34d8bd-5d4a-4b9c-aac2-e4893fc675ca
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 34

20121210T185802:634907626825905922
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
----field----
field: {3E431DE1-525E-47A3-B6B0-1CCBEC3A8C98}
name: __Workflow state
key: __workflow state
content-length: 38

{3E42AE7F-CB44-415C-91D2-B16E9E1ECB5A}
----field----
field: {001DD393-96C5-490B-924A-B0F25CD9EFD8}
name: __Lock
key: __lock
content-length: 5

<r />
