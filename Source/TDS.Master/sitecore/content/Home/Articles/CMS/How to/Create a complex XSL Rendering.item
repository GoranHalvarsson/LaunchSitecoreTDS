----item----
version: 1
id: {52B9B346-6E43-41D2-8802-8E075B65CBAD}
database: master
path: /sitecore/content/Home/Articles/CMS/How to/Create a complex XSL Rendering
parent: {44EEE557-704F-4F3D-87B4-187D128C2BAE}
name: Create a complex XSL Rendering
master: {00000000-0000-0000-0000-000000000000}
template: {D9019E30-F954-46CC-AA70-3E928C40B5D0}
templatekey: Article

----field----
field: {B0A67B2A-8B07-4E0B-8809-69F751709806}
name: __Tracking
key: __tracking
content-length: 385

<tracking>
  <profile id="{62A90F30-9BAB-425B-8A6D-4AE5A28371D6}" name="Job Function" presets="devon the developer|100||">
    <key name="Analytics" value="1" />
    <key name="Copywriting" value="1" />
    <key name="Personalization and Testing" value="2" />
    <key name="Technology" value="5" />
    <key name="Workflow and Publishing" value="3" />
  </profile>
</tracking>
----field----
field: {F1A1FE9E-A60C-4DDB-A3A0-BB5B29FE732E}
name: __Renderings
key: __renderings
content-length: 37

<r xmlns:p="p" xmlns:s="s" p:p="1" />
----field----
field: {A4F985D9-98B3-4B52-AAAF-4344F6E747C6}
name: __Workflow
key: __workflow
content-length: 38

{E3FBD307-EC4A-4377-BFEB-F732CD5CAF5A}
----version----
language: en
version: 1
revision: 1692e607-dfa6-42f7-9be2-7d4cea307f7d

----field----
field: {234542DC-C610-4CA8-BAA6-2592A8BCB1D7}
name: Title
key: title
content-length: 30

Create a complex XSL Rendering
----field----
field: {00E1D306-96BD-4B32-85B4-CD63C53CC6C1}
name: Abstract
key: abstract
content-length: 124

<p>Along with .aspx sublayouts, XSL renderings are one method of outputting Sitecore content to your presentation layer.</p>
----field----
field: {5A5684BB-8B54-44F6-ABCC-2BADA05ADA5D}
name: Body
key: body
content-length: 26497

<p>Along with .aspx sublayouts, XSL renderings are one method of outputting Sitecore content to your presentation layer. Personally, I like XSL a lot - coming from a background of many other CMS systems and products that used XSL extensively. In Sitecore, they are an optional way of outputting content that has a few advantages and disadvantages:</p>
<h5>Advantages:</h5>
<ul>
  <li>Quick and easy (if you know XSL) </li>
  <li>No need to compile </li>
  <li>Real-time preview in the Sitecore Developer Center </li>
  <li>Very suited to easily working with hierarchical repository content
  <ul>
    <li>Good for navigation, footers, etc. </li>
  </ul>
  </li>
  <li>Automatically gets the datasource context </li>
  <li>Full control over HTML output </li>
  <li>Can be used in MVC views </li>
</ul>
<h5>Disadvantages:</h5>
<ul>
  <li>Slightly slower than .aspx in most situations (although this can be offset by caching) </li>
  <li>Not as suited for complex output </li>
  <li>The "functional programming" methodology may be confusing for some programmers new to the concept. </li>
</ul>
<p> </p>
<h3>Exercise - making the Tree Menu in XSL.</h3>
<p>In Launch Sitecore, there is already a Tree Menu.ascx - we will reimplement that in XSL, starting from simple first principles and then adding functionality and styling.</p>
<h4>Step 1 - Create the XSL file</h4>
<p>When logged into the Sitecore Desktop, select Sitecore &gt; Developer Tools &gt; Developer Center. In Developer Center, select Create a New XSLT Rendering. This will launch a wizard which will ask you for a name, as well as a location for the XSL item definition and location on the file system. Sitecore will also create the XSL stub code for you as well.</p>
<h4>Step 2 - Find the "home node" for the menu (in this case - "What section are we in?")</h4>
<p>You'll notice on the existing Tree Menus work off of "Sections". The side menu on this exact page uses the article section as its "home" and starts displaying navigation for the children off that. Our first task is to determine the section that we are in. Normally this is a pretty easy task - and the Sitecore stub code gives you a pre-built function that works in many cases:</p>
<div class="code">
<div style="background: rgb(221, 221, 221); overflow: auto;">
<ol style="background: rgb(255, 255, 255); margin: 0px 0px 0px 2em; padding: 0px 0px 0px 5px;">
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:variable</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">home</span>"<span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">$sc_currentitem/ancestor-or-self::item[@template='site root']</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span></li>
</ol>
</div>
</div>
<p>What this is doing is going from our current item, and moving up the tree until we match an item based on 'site root' - this is important/useful as many Sitecore sites have many different domains or "home" items, so instead of guessing or manually defining one, it's often more useful to simply start from "here" and move up until you find the parent.</p>
<p>In our case, our sections are actually based on different template types: "Articles Section", "Team Section", "Glossary" - and while we could easily make our select statement work off these through "OR" matching, it makes more sense to use the function sc:IsItemOfType which we can use to match the fact that all these section types are all inheriting from "Site Section". So our code to determine which section we are in looks like so:</p>
<div class="code">
<div style="background: rgb(221, 221, 221); overflow: auto;">
<ol style="background: rgb(255, 255, 255); margin: 0px 0px 0px 2em; padding: 0px 0px 0px 5px;">
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:variable</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">home</span>"<span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">$sc_currentitem/ancestor-or-self::item[sc:IsItemOfType('site section',.)]</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span></li>
</ol>
</div>
</div>
<p>Now, the only issue is that sc:IsItemOfType will return everything under the returned node as a child. Normally, you can simply use &lt;xsl:for-each select="$home/item"&gt; and this will return the CMS articles and DMS articles (assuming we pass the current article context to preview). But sc:IsItemOfType will return all children and descendants. So in this case, we need to "re-instantiate" our node to just get a "normal" context, which only returns one level of children. We will define a variable called "home node" as follows:</p>
<div class="code">
<div style="background: rgb(221, 221, 221); overflow: auto;">
<ol style="background: rgb(255, 255, 255); margin: 0px 0px 0px 2em; padding: 0px 0px 0px 5px;">
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:variable</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">home_node</span>"<span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">sc:item($home/@id,.)</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span></li>
</ol>
</div>
</div>
<p>To be clear, normally you don't need to do this - it's simply the fact we are using a the sc:IsItemOfType special function which returns results somewhat differently that the usual XPATH functions.</p>
<h4>Step 3 - Start to output and preview </h4>
<p>Since the Developer Center has the very useful ability to preview in context, select a deep content item to preview (such as Content/Home/Articles/CMS/Topics/All about Taxonomy )</p>
<p>Next, write an XSL for-each to iterate through the children of the Site Section. </p>
<div class="code">
<div style="background: rgb(221, 221, 221); overflow: auto;">
<ol style="background: rgb(255, 255, 255); margin: 0px 0px 0px 2em; padding: 0px 0px 0px 5px;">
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">$home_node/item</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:value-of</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">sc:fld('Menu Title',.)</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);">&gt;</span></span></li>
</ol>
</div>
</div>
<p>The main difference between xsl:value-of and sc:text is that the latter outputs editing controls in the Page Editor, while xsl:value-of simply outputs the result with no editing controls. In this case, we don't want our navigation cluttered with editing commands, so we use value-of. The alternative would be to use &lt;sc:text field="Menu Title" /&gt;</p>
<p>That little function should simply output the children of the Articles section, namely "Content Management" and "Digital Marketing".</p>
<p>Next, we'll make a recursive function to show the children (just like from our .ascx example). Because XSL is a "functional programming language" it passes the "current context" to the function. So for example, if you are displaying the "Content Management" node and call an xsl:template, you don't need to define a variable to pass.</p>
<p>We'll make a new template called "getChildren" and simply iterate through the children:</p>
<div class="code">
<div style="background: rgb(221, 221, 221); overflow: auto;">
<ol style="background: rgb(255, 255, 255); margin: 0px 0px 0px 2em; padding: 0px 0px 0px 5px;">
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:template</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">getChildren</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">./item</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:value-of</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">sc:fld('Menu Title',.)</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:template</span><span style="color: rgb(0, 0, 255);">&gt;</span></span></li>
</ol>
</div>
</div>
<h4>Step 4 - Link your recursive functions</h4>
<p>Within your initial "for-each" loop, you need to now call your newly created XSL template:</p>
<div class="code">
<div style="background: rgb(221, 221, 221); overflow: auto;">
<ol style="background: rgb(255, 255, 255); margin: 0px 0px 0px 2em; padding: 0px 0px 0px 5px;">
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:call-template</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">getChildren</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span></li>
</ol>
</div>
</div>
<p>Lastly, add the same reference to your getChildren template itself, making it recursive. You should now be outputting all the appropriate content. Your root node, its children, and its children's children (and so on...)</p>
<h4>Step 5 - style your HTML output</h4>
<p>First, we want our output to match the list output of our CSS, adding ul, li as appropriate.</p>
<p>Second, what you've got working above will actually output more than you need. We want to only expand out the tree between the current article and its ancestors. Also, the CSS has a 'selected' attribute we can apply to our output. We use the function &lt;xsl:when test="$sc_currentitem/ancestor-or-self::item[@id=current()/@id]"&gt; to determine if the current position in the loop is a parent or matches the current item.</p>
<p>Lastly, we use the xsl function xsl:attribute to add value class='selected' to the LI node.</p>
<p>Since there are lots of little ul, li and classes to place, it's easiest to just show the final templates below. One thing you'll notice is that with the exception of some of the wrapping ids, the bulk of the code is the same and you could likely even trim the code further sharing the xsl:choose code - however for the sake of this exercise and how we built it up, I've left it as is to make it easier to follow.</p>
<div class="code">
<div style="background: rgb(221, 221, 221); overflow: auto;">
<ol style="background: rgb(255, 255, 255); margin: 0px 0px 0px 2.5em; padding: 0px 0px 0px 5px;">
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:template</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">match</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">*</span>"<span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">mode</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">main</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">ul</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">id</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">secnav</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">$home_node/item</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">li</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">id</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">liwrapper</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:choose</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:when</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">test</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">$sc_currentitem/ancestor-or-self::item[@id=current()/@id]</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:attribute</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">class</span>"<span style="color: rgb(0, 0, 255);">&gt;</span>selected<span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:attribute</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:value-of</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">sc:fld('Menu Title',.)</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:call-template</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">getChildren</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:when</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:otherwise</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:value-of</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">sc:fld('Menu Title',.)</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:otherwise</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:choose</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">li</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">ul</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:template</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li></li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:template</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">getChildren</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">ul</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">./item</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">li</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:choose</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:when</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">test</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">$sc_currentitem/ancestor-or-self::item[@id=current()/@id]</span>"<span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:attribute</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">class</span>"<span style="color: rgb(0, 0, 255);">&gt;</span>selected<span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:attribute</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:value-of</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">sc:fld('Menu Title',.)</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:call-template</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">name</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">getChildren</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:when</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:otherwise</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;</span><span style="color: rgb(163, 21, 21);">xsl:value-of</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(255, 0, 0);">select</span><span style="color: rgb(0, 0, 255);">=</span>"<span style="color: rgb(0, 0, 255);">sc:fld('Menu Title',.)</span>"<span style="color: rgb(0, 0, 255);"> /&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">sc:link</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:otherwise</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:choose</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">li</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:for-each</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li style="background: rgb(243, 243, 243);"><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">ul</span><span style="color: rgb(0, 0, 255);">&gt;</span></span> </li>
  <li><span style="font-size: 13px;"><span style="color: rgb(0, 0, 255);">&lt;/</span><span style="color: rgb(163, 21, 21);">xsl:template</span><span style="color: rgb(0, 0, 255);">&gt;</span></span></li>
</ol>
</div>
</div>
----field----
field: {EFC4A071-5574-404A-8206-FB502FCA909B}
name: Prerequisite Articles
key: prerequisite articles
content-length: 38

{1F8E34AA-E8F9-4573-9C9D-9FDDA999C433}
----field----
field: {82D725ED-6707-4532-86A6-5444E34332FD}
name: Contributors
key: contributors
content-length: 38

{15DD3569-2798-420D-87DA-4FA39281FB7E}
----field----
field: {D7229DBA-B952-4D82-A5A0-459C69618D45}
name: Menu Title
key: menu title
content-length: 30

Create a complex XSL Rendering
----field----
field: {25BED78C-4957-4165-998A-CA1B52F67497}
name: __Created
key: __created
content-length: 15

20120127T162000
----field----
field: {5DD74568-4D4B-44C1-B513-0AF5F4CDA34F}
name: __Created by
key: __created by
content-length: 12

sitecore\chc
----field----
field: {8CDC337E-A112-42FB-BBB4-4143751E123F}
name: __Revision
key: __revision
content-length: 36

1692e607-dfa6-42f7-9be2-7d4cea307f7d
----field----
field: {D9CF14B1-FA16-4BA6-9288-E8A174D4D522}
name: __Updated
key: __updated
content-length: 34

20121211T170828:634908425088998664
----field----
field: {BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}
name: __Updated by
key: __updated by
content-length: 14

sitecore\admin
----field----
field: {3E431DE1-525E-47A3-B6B0-1CCBEC3A8C98}
name: __Workflow state
key: __workflow state
content-length: 38

{3E42AE7F-CB44-415C-91D2-B16E9E1ECB5A}
----field----
field: {001DD393-96C5-490B-924A-B0F25CD9EFD8}
name: __Lock
key: __lock
content-length: 5

<r />
